AWSTemplateFormatVersion : "2010-09-09"
Description: >
  Deploy a High-Availability Web App using CloudFormation


Parameters :
  MNEnvironment:
    Description: MNMEnv Udacity HA Web App
    Type: String

  VpcCIDR:
    Description : Vpc cidr 10.0.0.0/16
    Type: String   

  PublicSubnet1CIDR:
    Description : public subnet 1 Cidr 
    Type: String  
    Default: 10.0.0.0/24 

  PublicSubnet2CIDR:
    Description : public subnet 2 cidr 
    Type: String 
    Default: 10.0.1.0/24   

  PrivateSubnet1CIDR:
    Description : private subnet 1 cidr 
    Type: String 
    Default: 10.0.2.0/24   
  
  PrivateSubnet2CIDR:
    Description : private subnet 2 cidr
    Type: String
    Default: 10.0.3.0/24 

Resources:
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Sub ${MNEnvironment} VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC   
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${MNEnvironment} public subnet 1 (AZ1)    

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC   
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${MNEnvironment} public subnet 2 (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC   
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${MNEnvironment} private subnet 1 (AZ1)      

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC 
      AvailabilityZone: !Select [1,!GetAZs ""] 
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false 
      Tags:
        - Key : Name
          Value: !Sub ${MNEnvironment} private subnet 2 (AZ2)



  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key : Name
          Value: !Sub ${MNEnvironment} InternetGateway

  InternetGatewayAtt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGW

  NatGatewayAZ1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIPAZ1
          - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "NAT to be used by servers in the private subnet AZ1"

  EIPAZ1:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: "Elastic IP for NatGatewayAZ1"        

  NatGatewayAZ2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIPAZ2
          - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: "NAT to be used by servers in the private subnet AZ2"  

  EIPAZ2:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: "Elastic IP for NatGatewayAZ2" 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name
          Value: "!Sub ${MNEnvironment} public route table"

  PublicInRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGW

  AssociatePubRT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1     

  AssociatePubRT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2             


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name
          Value: "!Sub ${MNEnvironment} private route table 1"
  
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PrivateRouteTable1
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId: !Ref NatGatewayAZ1       

  
  AssociatePrivRT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name
          Value: "!Sub ${MNEnvironment} private route table 2"
  
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PrivateRouteTable2
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId: !Ref NatGatewayAZ2      

  
  AssociatePrivRT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2


  LBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Web Load Balancer SG"
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80 
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
        - IpProtocol: tcp 
          FromPort: 80 
          ToPort: 80 
          CidrIp: 0.0.0.0/0 

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "web app sec group" 
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80 
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0      

  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash          
          apt update -y
          apt install -y apache2
          systemctl start apache2
          systemctl enable apache2
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
      ImageId: ami-052efd3df9dad4825
      SecurityGroups:
        - Ref: AppSG
      InstanceType: t3.medium      
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk" 
          Ebs:
            VolumeSize: '10'  

  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]        
      LaunchConfigurationName: 
        Ref: AppLaunchConfiguration
      MinSize: "2"
      MaxSize: "4" 
      TargetGroupARNs: 
        - Ref: AppTargetGroup        
      MetricsCollection:
        - Granularity: '1Minute'
          Metrics:
            - 'GroupMinSize'
            - 'GroupMaxSize'                     

  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      SecurityGroups:
        - Ref: LBSG


  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: 
        Ref: AppLB
      Port: 80
      Protocol: HTTP
  
  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref MainVPC
  
 
                 
Outputs:
  MainVPC:
    Description: MainVPC
    Value: !Ref MainVPC
    Export:
      Name: !Sub ${MNEnvironment}-VPCID

  PublicSubnet:
    Description: all public subnet in vpc
    Value: !Join [",",[ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${MNEnvironment}-PubSubnet  

  PrivatSubnet:
    Description: all public subnet in vpc
    Value: !Join [",",[ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${MNEnvironment}-PriSubnet           



        
  



     